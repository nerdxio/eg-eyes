# -*- coding: utf-8 -*-
"""model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHUoYV4UANrV-wrhj41MS4gTCpQTa5xW
"""

from google.colab import drive
drive.mount('/content/drive')

!python --version
!pip install --upgrade pip
!pip install mediapipe-model-maker

from google.colab import files
import os
import tensorflow as tf
assert tf.__version__.startswith('2')

from mediapipe_model_maker import image_classifier

import matplotlib.pyplot as plt

import os

# Example usage in Colab
folder = "/content/drive/MyDrive/data_set"
# Joining paths in Colab
image_path = os.path.join("/content", "drive", "MyDrive", folder)

print(image_path)
labels = []
for i in os.listdir(image_path):
  if os.path.isdir(os.path.join(image_path, i)):
    labels.append(i)
print(labels)

# Specify the subfolder to check
subfolder_name = '5'

# Path to the subfolder
subfolder_path = os.path.join(image_path, subfolder_name)

# Check if the subfolder exists and is a directory
if os.path.isdir(subfolder_path):
    # Count the number of files in the subfolder
    num_files = len([f for f in os.listdir(subfolder_path) if os.path.isfile(os.path.join(subfolder_path, f))])
    print(f"Number of files in '{subfolder_name}' folder: {num_files}")
else:
    print(f"The folder '{subfolder_name}' does not exist or is not a directory.")

print(len('200'))

NUM_EXAMPLES = 5

for label in labels:
  label_dir = os.path.join(image_path, label)
  example_filenames = os.listdir(label_dir)[:NUM_EXAMPLES]
  fig, axs = plt.subplots(1, NUM_EXAMPLES, figsize=(10,2))
  for i in range(NUM_EXAMPLES):
    axs[i].imshow(plt.imread(os.path.join(label_dir, example_filenames[i])))
    axs[i].get_xaxis().set_visible(False)
    axs[i].get_yaxis().set_visible(False)
  fig.suptitle(f'Showing {NUM_EXAMPLES} examples for {label}')

plt.show()

data = image_classifier.Dataset.from_folder(image_path)
train_data, remaining_data = data.split(0.8)
test_data, validation_data = remaining_data.split(0.5)

print(len(train_data))
print(len(validation_data))
print(len(test_data))

spec = image_classifier.SupportedModels.MOBILENET_V2
hparams = image_classifier.HParams(epochs=15,export_dir="exported_model")
options = image_classifier.ImageClassifierOptions(supported_model=spec, hparams=hparams)
options.model_options = image_classifier.ModelOptions(dropout_rate = 0.07)

model = image_classifier.ImageClassifier.create(
    train_data = train_data,
    validation_data = validation_data,
    options=options,
)

loss, acc = model.evaluate(test_data)
print(f'Test loss:{loss}, Test accuracy:{acc}')

model.export_model()

!ls exported_model
files.download('exported_model/model.tflite')

# import shutil

# # اسم المجلد الذي تريد حذفه
# folder_path = "/content/exported_model"

# # حذف المجلد ومحتوياته
# shutil.rmtree('/content/exported_model')